import { useLayoutEffect } from 'react';
import type { SetFieldValue, SetValues, SetInitialValues, SetErrors, SetFieldError, ClearFieldError, ClearErrors, Reset, ValidateField, RemoveListItem, ReorderListItem, InsertListItem, SetFormStatus, ResetDirty, ResetStatus, UseFormReturnType, _TransformValues } from '../types';
export declare const useIsomorphicEffect: typeof useLayoutEffect;
export declare function createFormActions<FormValues extends Record<string, any> = Record<string, any>>(name: string): {
    setFieldValue: SetFieldValue<FormValues>;
    setValues: SetValues<FormValues>;
    setInitialValues: SetInitialValues<FormValues>;
    setErrors: SetErrors;
    setFieldError: SetFieldError<FormValues>;
    clearFieldError: ClearFieldError;
    clearErrors: ClearErrors;
    reset: Reset;
    validate: () => void;
    validateField: ValidateField<FormValues>;
    reorderListItem: ReorderListItem<FormValues>;
    removeListItem: RemoveListItem<FormValues>;
    insertListItem: InsertListItem<FormValues>;
    setDirty: SetFormStatus;
    setTouched: SetFormStatus;
    resetDirty: ResetDirty<FormValues>;
    resetTouched: ResetStatus;
};
export declare function useFormActions<Values = Record<string, unknown>, TransformValues extends _TransformValues<Values> = (values: Values) => Values>(name: string | undefined, form: UseFormReturnType<Values, TransformValues>): void;
